{"version":3,"sources":["components/Board.jsx","components/Result.jsx","App.js","index.js"],"names":["Board","props","className","status","onClick","click","id","Result","turn","winner","score","combinations","App","state","fields","isGameWon","bot","handleClick","e","temp","target","setState","prevState","checkEmptySpace","checkWinner","board","filter","item","length","value1","value2","value3","map","field","i","a","b","c","toUpperCase","handleReset","handleResetScore","socore","handlePlayer","botOptions","index","rand","Math","floor","random","console","log","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76649334.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Board = (props) => {\r\n    return (\r\n        <div className={props.status} onClick={props.click} id={props.id}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\n\r\nconst Result = (props) => {\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <h1>Turn: {props.turn ? \"X\" : \"O\"}</h1>\r\n            <h1>Winner: {props.winner}</h1>\r\n            <div>\r\n                <h2>O wins: {props.score[0]} </h2>\r\n                <h2>X wins: {props.score[1]} </h2>\r\n                <h2>Remis: {props.score[2]} </h2>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Result from './components/Result';\n\nconst combinations = [\n  ['0', '1', '2'],\n  ['3', '4', '5'],\n  ['6', '7', '8'],\n  ['0', '3', '6'],\n  ['1', '4', '7'],\n  ['2', '5', '8'],\n  ['0', '4', '8'],\n  ['6', '4', '2']\n];\n\nclass App extends Component {\n  state = {\n    fields: [\n      {\n        id: 1,\n        status: 'empty'\n      },\n      {\n        id: 2,\n        status: 'empty'\n      },\n      {\n        id: 3,\n        status: 'empty'\n      },\n      {\n        id: 4,\n        status: 'empty'\n      },\n      {\n        id: 5,\n        status: 'empty'\n      },\n      {\n        id: 6,\n        status: 'empty'\n      },\n      {\n        id: 7,\n        status: 'empty'\n      },\n      {\n        id: 8,\n        status: 'empty'\n      },\n      {\n        id: 9,\n        status: 'empty'\n      }\n    ],\n    turn: true,\n    isGameWon: false,\n    winner: \"?\",\n    score: [0, 0, 0],\n    bot: false\n  }\n\n\n\n  handleClick = (e) => {\n    if (!this.state.isGameWon) {\n      let temp = [...this.state.fields];\n      if (temp[e.target.id - 1].status === 'empty') {\n        if (this.state.turn) {\n          temp[e.target.id - 1].status = 'x';\n        } else {\n          temp[e.target.id - 1].status = 'o';\n        }\n        this.setState((prevState) => ({\n          fields: temp,\n          turn: !prevState.turn\n        }));\n        this.state.bot && this.bot()\n      } else {\n\n      }\n      \n      this.checkEmptySpace();\n      this.checkWinner();\n    }\n  }\n\n\n  checkEmptySpace = () => {\n    let board = [...this.state.fields];\n    board = board.filter((item) => (\n      item.status !== \"empty\"\n    ));\n    if (board.length === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkWinner = () => {\n    let board = [...this.state.fields];\n    let value1, value2, value3;\n    let score = this.state.score;\n    board = board.map(field => (\n      field.status\n    ));\n    for (let i = 0; i < 8; i++) {\n      const [a, b, c] = combinations[i];\n      value1 = board[a];\n      value2 = board[b];\n      value3 = board[c];\n      if (value1 !== 'empty' && value1 === value2 && value1 === value3) {\n        if (value1 === \"x\") {\n          score[1] += 1;\n        } else if (value1 === 'o') {\n          score[0] += 1;\n        }\n        this.setState({\n          isGameWon: true,\n          winner: value1.toUpperCase(),\n        });\n        return\n      }\n    }\n    if (!this.state.isGameWon && this.checkEmptySpace()) {\n      score[2] += 1;\n      this.setState({\n        isGameWon: true,\n        winner: 'REMIS!',\n        score: score\n      });\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      fields: [\n        {\n          id: 1,\n          status: 'empty'\n        },\n        {\n          id: 2,\n          status: 'empty'\n        },\n        {\n          id: 3,\n          status: 'empty'\n        },\n        {\n          id: 4,\n          status: 'empty'\n        },\n        {\n          id: 5,\n          status: 'empty'\n        },\n        {\n          id: 6,\n          status: 'empty'\n        },\n        {\n          id: 7,\n          status: 'empty'\n        },\n        {\n          id: 8,\n          status: 'empty'\n        },\n        {\n          id: 9,\n          status: 'empty'\n        }\n      ],\n      turn: true,\n      isGameWon: false,\n      winner: \"?\",\n    })\n  }\n  handleResetScore = () => {\n    this.setState({\n      fields: [\n        {\n          id: 1,\n          status: 'empty'\n        },\n        {\n          id: 2,\n          status: 'empty'\n        },\n        {\n          id: 3,\n          status: 'empty'\n        },\n        {\n          id: 4,\n          status: 'empty'\n        },\n        {\n          id: 5,\n          status: 'empty'\n        },\n        {\n          id: 6,\n          status: 'empty'\n        },\n        {\n          id: 7,\n          status: 'empty'\n        },\n        {\n          id: 8,\n          status: 'empty'\n        },\n        {\n          id: 9,\n          status: 'empty'\n        }\n      ],\n      turn: true,\n      isGameWon: false,\n      winner: \"?\",\n      socore: [0, 0, 0]\n    })\n  }\n\n  handlePlayer = () => {\n    this.setState((prevState) => ({\n      bot: !prevState.bot\n    }));\n    this.handleReset();\n  }\n\n  bot = () =>{\n    if(!this.state.isGameWon){\n      let botOptions = [...this.state.fields];\n      botOptions = botOptions.filter((index) => index.status === 'empty')\n      if(botOptions.length > 0){\n        let rand = Math.floor(Math.random() * botOptions.length);\n        console.log(rand);\n        botOptions[rand].status = 'o';\n        this.setState((prevState) =>({\n          turn : !prevState.turn \n        }));\n      }\n    }\n  }\n\n  render() {\n\n    let fields = [...this.state.fields];\n    fields = fields.map(field => (\n      <Board key={field.id} id={field.id} status={field.status} click={this.handleClick} />\n    ));\n    return (\n      <div className=\"app\">\n        <div className=\"table\">\n          <Result turn={this.state.turn} winner={this.state.winner} isGameWon={this.state.isGameWon} score={this.state.score} />\n          <button className={this.state.bot ? 'bot_btn' : 'human_btn'} onClick={this.handlePlayer}>Play with {this.state.bot ? 'BOT' : 'HUMAN'}</button>\n          <button className=\"reset_btn\" onClick={this.handleReset}>RESET?</button>\n        <button className=\"reset_btn\" onClick={this.handleResetScore}>RESET SCORE?</button>\n        </div>\n        <div className=\"board\">\n          {fields}\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}